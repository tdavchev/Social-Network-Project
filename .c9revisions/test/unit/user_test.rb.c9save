{"ts":1366684019596,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"require 'test_helper'\n\nclass UserTest < ActiveSupport::TestCase\n  test \"a user should enter a first name\" do\n    user = User.new\n    assert !user.save\n    assert !user.errors[:first_name].empty?\n  end\n\n  test \"a user should enter a last name\" do\n    user = User.new\n    assert !user.save\n    assert !user.errors[:last_name].empty?\n  end\n\n  test \"a user should enter a profile name\" do\n    user = User.new\n    assert !user.save\n    assert !user.errors[:profile_name].empty?\n  end\n\n  test \"a user should have a unique profile name\" do\n    user = User.new\n    user.profile_name = users(:jason).profile_name\n    \n    assert !user.save\n    assert !user.errors[:profile_name].empty?\n  end\n\n  test \"a user should have a profile name without spaces\" do\n    user = User.new(first_name: 'Jason', last_name: 'Seifer', email: 'jason2@teamtreehouse.com')\n    user.password = user.password_confirmation = 'asdfasdf'\n\n    assert !user.save\n    assert !user.errors[:profile_name].empty?\n    assert user.errors[:profile_name].include?(\"Must be formatted correctly.\")\n  end\n\n  test \"a user can have a correctly formatted profile name\" do\n    user = User.new(first_name: 'Jason', last_name: 'Seifer', email: 'jason2@teamtreehouse.com')\n    user.password = user.password_confirmation = 'asdfasdf'\n\n    user.profile_name = 'jasonseifer_1'\n    assert user.valid?\n  end\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":1351}]],"length":1351}
{"contributors":[],"silentsave":false,"ts":1366684053183,"patch":[[{"diffs":[[0,"estCase\n"],[1,"    \n    should have_many(:user_friendship)\n    \n"],[0,"  test \""]],"start1":56,"start2":56,"length1":16,"length2":65}]],"length":1400,"saved":false}
{"ts":1366684154873,"patch":[[{"diffs":[[0,"ndship)\n"],[1,"    should have_many(:friends)\n"],[0,"    \n  t"]],"start1":100,"start2":100,"length1":16,"length2":47}]],"length":1431,"saved":false}
{"ts":1366684418805,"patch":[[{"diffs":[[0,"?\n  end\n"],[1,"  \n  test \"no error is raised when tryign to access a friend list\" do\n    assert_nothing_raised do\n        user.friends\n    end\n  end\n  \n"],[0,"end\n"]],"start1":1419,"start2":1419,"length1":12,"length2":149}]],"length":1568,"saved":false}
{"ts":1366684434191,"patch":[[{"diffs":[[0,"    user"],[1,"s"],[0,".friends"]],"start1":1530,"start2":1530,"length1":16,"length2":17}]],"length":1569,"saved":false}
{"ts":1366684443792,"patch":[[{"diffs":[[0,"   users"],[1,"(:jason)"],[0,".friends"]],"start1":1531,"start2":1531,"length1":16,"length2":24}]],"length":1577,"saved":false}
{"ts":1366684550319,"patch":[[{"diffs":[[0,"    end\n"],[1,"    \n    test \"that creating friendships on a user works\" do \n        users(:jason).friends << users(:mike)\n        users(:jason).friends.reload\n        assert users(:jason).friends.include?(users(:mike))\n    end\n"],[0,"  end\n  "]],"start1":1556,"start2":1556,"length1":16,"length2":229}]],"length":1790,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366685082259,"patch":[[{"diffs":[[0,"iendship"],[1,"s"],[0,")\n    sh"]],"start1":98,"start2":98,"length1":16,"length2":17}]],"length":1791,"saved":false}
