{"ts":1366684019596,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"require 'test_helper'\n\nclass UserTest < ActiveSupport::TestCase\n  test \"a user should enter a first name\" do\n    user = User.new\n    assert !user.save\n    assert !user.errors[:first_name].empty?\n  end\n\n  test \"a user should enter a last name\" do\n    user = User.new\n    assert !user.save\n    assert !user.errors[:last_name].empty?\n  end\n\n  test \"a user should enter a profile name\" do\n    user = User.new\n    assert !user.save\n    assert !user.errors[:profile_name].empty?\n  end\n\n  test \"a user should have a unique profile name\" do\n    user = User.new\n    user.profile_name = users(:jason).profile_name\n    \n    assert !user.save\n    assert !user.errors[:profile_name].empty?\n  end\n\n  test \"a user should have a profile name without spaces\" do\n    user = User.new(first_name: 'Jason', last_name: 'Seifer', email: 'jason2@teamtreehouse.com')\n    user.password = user.password_confirmation = 'asdfasdf'\n\n    assert !user.save\n    assert !user.errors[:profile_name].empty?\n    assert user.errors[:profile_name].include?(\"Must be formatted correctly.\")\n  end\n\n  test \"a user can have a correctly formatted profile name\" do\n    user = User.new(first_name: 'Jason', last_name: 'Seifer', email: 'jason2@teamtreehouse.com')\n    user.password = user.password_confirmation = 'asdfasdf'\n\n    user.profile_name = 'jasonseifer_1'\n    assert user.valid?\n  end\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":1351}]],"length":1351}
{"contributors":[],"silentsave":false,"ts":1366684053183,"patch":[[{"diffs":[[0,"estCase\n"],[1,"    \n    should have_many(:user_friendship)\n    \n"],[0,"  test \""]],"start1":56,"start2":56,"length1":16,"length2":65}]],"length":1400,"saved":false}
{"ts":1366684154873,"patch":[[{"diffs":[[0,"ndship)\n"],[1,"    should have_many(:friends)\n"],[0,"    \n  t"]],"start1":100,"start2":100,"length1":16,"length2":47}]],"length":1431,"saved":false}
{"ts":1366684418805,"patch":[[{"diffs":[[0,"?\n  end\n"],[1,"  \n  test \"no error is raised when tryign to access a friend list\" do\n    assert_nothing_raised do\n        user.friends\n    end\n  end\n  \n"],[0,"end\n"]],"start1":1419,"start2":1419,"length1":12,"length2":149}]],"length":1568,"saved":false}
{"ts":1366684434191,"patch":[[{"diffs":[[0,"    user"],[1,"s"],[0,".friends"]],"start1":1530,"start2":1530,"length1":16,"length2":17}]],"length":1569,"saved":false}
{"ts":1366684443792,"patch":[[{"diffs":[[0,"   users"],[1,"(:jason)"],[0,".friends"]],"start1":1531,"start2":1531,"length1":16,"length2":24}]],"length":1577,"saved":false}
{"ts":1366684550319,"patch":[[{"diffs":[[0,"    end\n"],[1,"    \n    test \"that creating friendships on a user works\" do \n        users(:jason).friends << users(:mike)\n        users(:jason).friends.reload\n        assert users(:jason).friends.include?(users(:mike))\n    end\n"],[0,"  end\n  "]],"start1":1556,"start2":1556,"length1":16,"length2":229}]],"length":1790,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366685082259,"patch":[[{"diffs":[[0,"iendship"],[1,"s"],[0,")\n    sh"]],"start1":98,"start2":98,"length1":16,"length2":17}]],"length":1791,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366692728358,"patch":[[{"diffs":[[0,"    end\n"],[-1,"  end\n"],[0,"  \nend\n"]],"start1":1770,"start2":1770,"length1":21,"length2":15}]],"length":1785,"saved":false}
{"ts":1366692759956,"patch":[[{"diffs":[[0,"    end\n"],[1,"  end\n"],[0,"  \nend\n"]],"start1":1770,"start2":1770,"length1":15,"length2":21}]],"length":1791,"saved":false}
{"ts":1366692785920,"patch":[[{"diffs":[[0," end\n  \n"],[1,"  "],[0,"  test \""]],"start1":1423,"start2":1423,"length1":16,"length2":18},{"diffs":[[0,"nd list\" do\n"],[1,"    "],[0,"    assert_n"]],"start1":1488,"start2":1488,"length1":24,"length2":28},{"diffs":[[0,"    end\n"],[1,"    \n"],[0,"  end\n  "]],"start1":1776,"start2":1776,"length1":16,"length2":21}]],"length":1802,"saved":false}
{"ts":1366692881688,"patch":[[{"diffs":[[0,"nd\n    \n"],[1,"    test \"that calling to_param on a user shows the profile name\" do\n        assert_equal \"jasonseifer\", users(:jason).to_param\n    end\n    \n"],[0,"  end\n  "]],"start1":1781,"start2":1781,"length1":16,"length2":157}]],"length":1943,"saved":false}
{"ts":1366693075247,"patch":[[{"diffs":[[0," end\n  \n"],[-1,"  "],[0,"  test \""]],"start1":1423,"start2":1423,"length1":18,"length2":16},{"diffs":[[0,"nd list\" do\n"],[-1,"    "],[0,"    assert_n"]],"start1":1486,"start2":1486,"length1":28,"length2":24},{"diffs":[[0,"end\n"],[-1,"    \n    test \"that calling to_param on a user shows the profile name\" do\n        assert_equal \"jasonseifer\", users(:jason).to_param\n    end\n    \n"],[0,"  en"]],"start1":1774,"start2":1774,"length1":154,"length2":8}]],"length":1791,"saved":false}
{"ts":1366693182342,"patch":[[{"diffs":[[0,"_helper'"],[-1,"\n"],[1,"\r\n\r"],[0,"\nclass U"]],"start1":13,"start2":13,"length1":17,"length2":19},{"diffs":[[0,"TestCase"],[1,"\r"],[0,"\n  "],[-1,"  \n  "],[1,"should have_many(:statuses)\r\n"],[0,"  should"]],"start1":57,"start2":57,"length1":24,"length2":49},{"diffs":[[0,"ndships)"],[1,"\r"],[0,"\n"],[-1,"  "],[0,"  should"]],"start1":127,"start2":127,"length1":19,"length2":18},{"diffs":[[0,"friends)"],[-1,"\n    "],[1,"\r\n\r"],[0,"\n  test "]],"start1":157,"start2":157,"length1":21,"length2":19},{"diffs":[[0,"a first name\" do"],[1,"\r"],[0,"\n    user = User"]],"start1":197,"start2":197,"length1":32,"length2":33},{"diffs":[[0," user = User.new"],[1,"\r"],[0,"\n    assert !use"]],"start1":218,"start2":218,"length1":32,"length2":33},{"diffs":[[0,"ssert !user.save"],[1,"\r"],[0,"\n    assert !use"]],"start1":241,"start2":241,"length1":32,"length2":33},{"diffs":[[0,"rst_name].empty?"],[1,"\r"],[0,"\n  end"],[-1,"\n"],[1,"\r\n\r"],[0,"\n  test \"a user "]],"start1":286,"start2":286,"length1":39,"length2":42},{"diffs":[[0," a last name\" do"],[1,"\r"],[0,"\n    user = User"]],"start1":340,"start2":340,"length1":32,"length2":33},{"diffs":[[0," user = User.new"],[1,"\r"],[0,"\n    assert !use"]],"start1":361,"start2":361,"length1":32,"length2":33},{"diffs":[[0,"ssert !user.save"],[1,"\r"],[0,"\n    assert !use"]],"start1":384,"start2":384,"length1":32,"length2":33},{"diffs":[[0,"ast_name].empty?"],[1,"\r"],[0,"\n  end"],[-1,"\n"],[1,"\r\n\r"],[0,"\n  test \"a user "]],"start1":428,"start2":428,"length1":39,"length2":42},{"diffs":[[0,"profile name\" do"],[1,"\r"],[0,"\n    user = User"]],"start1":485,"start2":485,"length1":32,"length2":33},{"diffs":[[0,"r = User.new"],[1,"\r"],[0,"\n    assert "]],"start1":510,"start2":510,"length1":24,"length2":25},{"diffs":[[0,"ssert !user.save"],[1,"\r"],[0,"\n    assert !use"]],"start1":529,"start2":529,"length1":32,"length2":33},{"diffs":[[0,"ile_name].empty?"],[1,"\r"],[0,"\n  end"],[-1,"\n"],[1,"\r\n\r"],[0,"\n  test \"a user "]],"start1":576,"start2":576,"length1":39,"length2":42},{"diffs":[[0,"profile name\" do"],[1,"\r"],[0,"\n    user = User"]],"start1":639,"start2":639,"length1":32,"length2":33},{"diffs":[[0,"User.new"],[1,"\r"],[0,"\n    use"]],"start1":668,"start2":668,"length1":16,"length2":17},{"diffs":[[0,"ile_name"],[-1,"\n    "],[1,"\r\n\r"],[0,"\n    ass"]],"start1":720,"start2":720,"length1":21,"length2":19},{"diffs":[[0,"ssert !user.save"],[1,"\r"],[0,"\n    assert !use"]],"start1":737,"start2":737,"length1":32,"length2":33},{"diffs":[[0,"].empty?"],[1,"\r"],[0,"\n  end"],[-1,"\n"],[1,"\r\n\r"],[0,"\n  test "]],"start1":792,"start2":792,"length1":23,"length2":26},{"diffs":[[0,"t spaces\" do"],[1,"\r"],[0,"\n    user = "]],"start1":859,"start2":859,"length1":24,"length2":25},{"diffs":[[0,"mtreehouse.com')"],[1,"\r"],[0,"\n    user.passwo"]],"start1":953,"start2":953,"length1":32,"length2":33},{"diffs":[[0,"= 'asdfasdf'"],[-1,"\n"],[1,"\r\n\r\n    user.profile_name = 'Contains spaces'\r\n\r"],[0,"\n    assert "]],"start1":1018,"start2":1018,"length1":25,"length2":72},{"diffs":[[0,"ser.save"],[1,"\r"],[0,"\n    ass"]],"start1":1092,"start2":1092,"length1":16,"length2":17},{"diffs":[[0,"].empty?"],[1,"\r"],[0,"\n    ass"]],"start1":1139,"start2":1139,"length1":16,"length2":17},{"diffs":[[0,"ectly.\")"],[1,"\r"],[0,"\n  end"],[-1,"\n"],[1,"\r\n\r"],[0,"\n  test "]],"start1":1219,"start2":1219,"length1":23,"length2":26},{"diffs":[[0,"ser "],[-1,"can"],[1,"should"],[0," have a "],[-1,"correctly formatted "],[0,"prof"]],"start1":1249,"start2":1249,"length1":39,"length2":22},{"diffs":[[0,"ile name\" do"],[1,"\r"],[0,"\n    user = "]],"start1":1271,"start2":1271,"length1":24,"length2":25},{"diffs":[[0,"se.com')"],[1,"\r"],[0,"\n    use"]],"start1":1373,"start2":1373,"length1":16,"length2":17},{"diffs":[[0,"sdfasdf'"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    use"]],"start1":1434,"start2":1434,"length1":17,"length2":19},{"diffs":[[0,"eifer_1'"],[1,"\r"],[0,"\n    ass"]],"start1":1477,"start2":1477,"length1":16,"length2":17},{"diffs":[[0,"lid?"],[-1,"\n  end\n  \n  test \"no error is raised when tryign to access a friend list\" do\n    assert_nothing_raised do\n        users(:jason).friends\n    end\n    \n    test \"that creating friendships on a user works\" do \n        users(:jason).friends << users(:mike)\n        users(:jason).friends.reload\n        assert users(:jason).friends.include?(users(:mike))\n    end\n  end\n  \nend"],[1,"\r\n  end\r\nend\r"],[0,"\n"]],"start1":1505,"start2":1505,"length1":374,"length2":18}]],"length":1523,"saved":false}
{"ts":1366693232033,"patch":[[{"diffs":[[0,"\r\n  "],[-1,"should have_many(:statuses)\r\n"],[1,"  \r\n  "],[0,"  sh"]],"start1":65,"start2":65,"length1":37,"length2":14},{"diffs":[[0,"ships)\r\n"],[1,"  "],[0,"  should"]],"start1":106,"start2":106,"length1":16,"length2":18},{"diffs":[[0,"iends)\r\n"],[1,"    "],[0,"\r\n  test"]],"start1":138,"start2":138,"length1":16,"length2":20},{"diffs":[[0,"e_name\r\n"],[1,"    "],[0,"\r\n"],[-1,""],[0,"    asse"]],"start1":705,"start2":705,"length1":18,"length2":22},{"diffs":[[0,"\r\n\r\n"],[-1,"    user.profile_name = 'Contains spaces'\r\n\r\n"],[0,"    "]],"start1":1017,"start2":1017,"length1":53,"length2":8},{"diffs":[[0,"est \"a user "],[-1,"should"],[1,"can"],[0," have a "],[1,"correctly formatted "],[0,"profile name"]],"start1":1183,"start2":1183,"length1":38,"length2":55},{"diffs":[[0,"valid?\r\n"],[-1,""],[0,"  end\r\n"],[1,"  \r\n  test \"no error is raised when tryign to access a friend list\" do\r\n    assert_nothing_raised do\r\n        users(:jason).friends\r\n    end\r\n    \r\n    test \"that creating friendships on a user works\" do \r\n        users(:jason).friends << users(:mike)\r\n        users(:jason).friends.reload\r\n        assert users(:jason).friends.include?(users(:mike))\r\n    end\r\n  end\r\n  \r\n"],[0,"end\r\n"]],"start1":1462,"start2":1462,"length1":20,"length2":392}]],"length":1854,"saved":false}
{"ts":1366693511596,"patch":[[{"diffs":[[0,"tryi"],[-1,"g"],[0,"n"],[1,"g"],[0," to "]],"start1":1513,"start2":1513,"length1":10,"length2":10},{"diffs":[[0,"d list\" do\r\n"],[1,"    "],[0,"    assert_n"]],"start1":1537,"start2":1537,"length1":24,"length2":28},{"diffs":[[0,"sed do\r\n        "],[1,"    "],[0,"users(:jason).fr"]],"start1":1575,"start2":1575,"length1":32,"length2":36},{"diffs":[[0,"riends\r\n"],[1,"        end\r\n"],[0,"    end\r"]],"start1":1610,"start2":1610,"length1":16,"length2":29},{"diffs":[[0,"   end\r\n"],[-1,"  end\r\n"],[0,"  \r\nend\r"]],"start1":1851,"start2":1851,"length1":23,"length2":16}]],"length":1868,"saved":false}
{"ts":1366693569570,"patch":[[{"diffs":[[0," end\r\n  "],[1,"  \r\n    test \"that calling to_param on a user returns the proifle_name\" do\r\n        assert_equal \"jasonseifer\", users(:jason).to_param\r\n    end"],[0,"\r\nend\r\n"]],"start1":1853,"start2":1853,"length1":15,"length2":158}]],"length":2011,"saved":false}
